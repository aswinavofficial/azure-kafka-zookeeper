---
- name: Set up Kafka
  hosts: kafka_brokers
  become: yes
  vars:
    scala_kafka_version: "2.13-3.4.0"
    kafka_version: "3.4.0"
    kafka_home: "/opt/kafka"
    zookeeper_host: "{{ groups['zookeeper'][0] }}"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required dependencies
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - "openjdk-11-jdk"
        - "curl"
        - "wget"
    
    - name: Create Kafka user
      user:
        name: kafkauser
        state: present
    
    - name: Create Kafka directory
      file:
        path: /opt/kafka
        state: directory
        owner: kafkauser
        group: kafkauser

    - name: Download and extract Kafka
      unarchive:
        src: "https://downloads.apache.org/kafka/{{ kafka_version }}/kafka_{{ scala_kafka_version }}.tgz"
        dest: "{{ kafka_home }}"
        remote_src: yes
        creates: "{{ kafka_home }}/kafka_{{ scala_kafka_version }}"

    - name: Configure Kafka
      template:
        src: templates/server.properties.j2
        dest: "{{ kafka_home }}/kafka_{{ scala_kafka_version }}/config/server.properties"
      vars:
        #broker_id: "{{ play_hosts.index(inventory_hostname) }}"
        broker_id: "{{ hostvars[inventory_hostname]['kafka_broker_id'] }}"

    - name: Change ownership of Kafka directory
      file:
        path: /opt/kafka
        owner: kafkauser
        recurse: yes

    - name: Set KAFKA_HEAP_OPTS environment variable
      shell: "export KAFKA_HEAP_OPTS='-Xmx512m -Xms512m'"
      environment:
        KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m"
        
    - name: Start Kafka
      command: "{{ kafka_home }}/kafka_{{ scala_kafka_version }}/bin/kafka-server-start.sh -daemon {{ kafka_home }}/kafka_{{ scala_kafka_version }}/config/server.properties"

    - name: Check if Kafka is running
      shell: ps -ef | grep kafka | grep -v grep
      register: kafka_process

    - name: Print Kafka status
      debug:
        msg: "Kafka is {{ 'running' if kafka_process.stdout else 'not running' }}"
